{"name":"Ewarp","body":"# ewarp: Erlang WAR packager\r\n\r\nPackage Erlang apps as [Java WAR](http://en.wikipedia.org/wiki/WAR_%28Sun_file_format%29) file with an embedded [Erjang](http://erjang.org) runtime. The WAR file can be run on any standard Java servlet container, such as [Tomcat](http://tomcat.apache.org/) or [Jetty](http://jetty.codehaus.org/jetty/). Deployment in the cloud (PaaS) is easy using a WAR file. Popular options are [Amazon Elastic Beanstalk](http://aws.amazon.com/elasticbeanstalk/) and [CloudFoundry](http://www.cloudfoundry.com/). The Erlang app does not necessarily need to be Web-aware, the servlet container simply acts as a convenient and standardized runtime container, which is provided by many (cloud) hosting providers. \r\n\r\nThis project is currently work in progress.\r\n\r\n## Planned feature set:\r\n\r\n * Single script call to create a WAR file from a simple Erlang app. Possibly integration with [rebar](https://github.com/basho/rebar)\r\n * Many customization options\r\n * Automatic cluster management in cloud environments via customizable NodeFinders. Example: all nodes in a Elastic Beanstalk environment can be found via the Amazon EC2 and Beanstalk APIs and are automatically made known\r\n * Full access to the Java world and additional libraries/frameworks\r\n * Java-Erlang web bridge, possibly using [SimpleBridge](https://github.com/nitrogen/simple_bridge) or [EWGI](https://github.com/skarab/ewgi)\r\n * Triggering of Erlang functions on startup/shutdown/specified web calls\r\n * running Erlang apps in an OSGi container\r\n\r\n## code structure\r\n\r\n* ewarp-core\r\n\r\n\tCore module containing the runtime handling, node discovery, ...\r\n* ewarp-web\r\n\r\n\tWeb runtime adapter to start Erjang in a Java Servlet container, e.g. Tomcat\r\n* ewarp-example-web\r\n\r\n\tSample application\r\n* ewarp-web-bridge (planned)\r\n\r\n\tBridges HTTP requests into the Erlang code\r\n* ewarp-aws (planned)\r\n\r\n\tNode discovery and advertising in a Amazon EC2/Elastic Beanstalk environment\r\n* ewarp-osgi (planned)\r\n\r\n\tRuntime adapter to start Erjang in an OSGi environment, e.g. Eclipse Equinox or Apache Felix\r\n\r\n\r\n## How to build\r\n\r\n**Note**: as this is work in progress, there are not yet full instructions...\r\n\r\nGet and build Erjang from GitHub:\r\n\r\n\t# get source code\r\n\tgit clone https://github.com/trifork/erjang.git\r\n\tcd erjang\r\n\t# modify erjang_cfg.properties to point to your Erlang installation,\r\n\tvi erjang_cfg.properties\r\n\t# then build Erjang and a jar containing the Erlang runtime\r\n\tant jar otpjar\r\n\r\nThis creates `erjang-0.1.jar` as well as `otp-<OTPVERSION>.jar`\r\n\r\nGet and build ewarp and the sample application from GitHub:\r\nBuild using [Gradle](http://www.gradle.org/), which is downloaded automatically, when called as ./gradlew\r\n\r\n\t# get source code\r\n\tgit clone https://github.com/jetztgradnet/ewarp.git\r\n\tcd ewarp\r\n\t# modify gradle.properties to specify Erjang and OTP versions\r\n\tvi gradle.properties\r\n\t# build ewarp and the sample project\r\n\t./gradlew\r\n\r\nThis produces both the ewarp jar files as well as \r\n\r\nUpload the created .WAR-file (`ewarp-example-web/build/libs/ewarp-example-web-0.1.war`) to your Servlet container (e.g. Tomcat or Jetty)\r\nThe Gradle-based build allows to run the WAR file inline using the following command:\r\n\r\n\t./gradlew jettyRun\r\n\r\n\r\n## How to use\r\n\r\nSee project [ewarp-example-web](https://github.com/jetztgradnet/ewarp/tree/master/ewarp-example-web) for an example application. It can be build from the ewarp-example-web directory using `./gradlew war`.\r\n\r\nBasically, create a web application, with `erjang-0.1.jar`, `ewarp-core-0.1.jar`, `ewarp-web-0.1.jar`, and a jar file with your prefered OTP version, e.g. `otp-R13B04.jar` contained in `WEB-INF/lib`.\r\n\r\nIn order to create and start the Erjang runtime, `erjangx.ewarp.web.ErjangContextListener` should be registered as ServletContextListener. Additionally, the servlet erjangx.ewarp.web.stats.ErjangStatusServlet may be registered to provide some runtime information.\r\n\r\nExample of a `WEB-INF/web.xml`:\r\n\r\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\t<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\r\n\t\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\t\txsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\"\r\n\t\tversion=\"2.5\">\r\n\t\t<display-name>Erlang Web Application</display-name>\r\n\t\t<listener>\r\n\t\t\t<listener-class>erjangx.ewarp.web.ErjangContextListener</listener-class>\r\n\t\t</listener>\r\n\t\t<servlet>\r\n\t\t\t<servlet-name>status</servlet-name>\r\n\t\t\t<servlet-class>erjangx.ewarp.web.stats.ErjangStatusServlet</servlet-class>\r\n\t\t</servlet>\r\n\t\t<servlet-mapping>\r\n\t\t\t<servlet-name>status</servlet-name>\r\n\t\t\t<url-pattern>/status/*</url-pattern>\r\n\t\t</servlet-mapping>\r\n\r\n\t\t<servlet-mapping>\r\n\t\t\t<servlet-name>status</servlet-name>\r\n\t\t\t<url-pattern>/status</url-pattern>\r\n\t\t</servlet-mapping>\r\n\t</web-app>\r\n\r\n## How to include your Erlang app\r\n\r\nCreate a release, e.g. using [rebar](https://github.com/basho/rebar). Then package this release into a Jar file with a ant build script similar to the [one from Erjang](https://github.com/trifork/erjang/blob/master/build.xml):\r\n\r\n\t<project name=\"erjang\" default=\"all\">\r\n\t\t<property file=\"erjang.properties\" />\r\n\t\t<target name=\"otpjar\">\r\n\t\t\t<jar jarfile=\"otp-${erjang.otp.version}.jar\" basedir=\"${erjang.otp.root}\">\r\n\t\t\t\t<exclude name=\"**/*.so\" />\r\n\t\t\t\t<exclude name=\"**/*.dll\" />\r\n\t\t\t\t<exclude name=\"**/*.a\" />\r\n\t\t\t\t<exclude name=\"**/*.erl\" />\r\n\t\t\t\t<exclude name=\"**/bin/beam\" />\r\n\t\t\t\t<exclude name=\"**/bin/beam.smp\" />\r\n\t\t\t\t<exclude name=\"lib/megaco-*/**\" />\r\n\t\t\t\t<exclude name=\"lib/wx-*/**\" />\r\n\t\t\t\t<exclude name=\"lib/hipe-*/**\" />\r\n\t\t\t\t<exclude name=\"lib/jinterface-*/**\" />\r\n\t\t\t\t<exclude name=\"lib/erl_interface-*/**\" />\r\n\t\t\t\t<exclude name=\"lib/ic-*/java_src/**\" />\r\n\t\t\t\t<exclude name=\"usr/include/**\" />\r\n\t\t\t\t<exclude name=\"**/examples/**\" />\r\n\t\t\t</jar>\r\n\t\t</target>\r\n\t</project>\r\n\r\nCreate a file `erjang.properties` to specify OTP version and root dir, which is the one containing your release:\r\n\r\n\terjang.otp.version=R13B04\r\n\terjang.otp.root=rel/myapp\r\n\r\nCreate the application jar file using `ant otpjar` and place the created jar file in your app's `WEB-INF/lib` directory.\r\n\r\n## How to use in Eclipse\r\n\r\nWhen developing using Eclipse and WTP, the best way is to let Gradle generate Eclipse projects for the projects:\r\n\r\n\tcd ewarp\r\n\tgradle eclipse\r\n\r\nThese can now be imported into Eclipse using `File -> Import...`.\r\n\r\nCreate a Web Project using `File -> New...`, choose `Dynamic Web Project`. Add the ewarp projects as (web) dependencies to your project. Now you can create a Server (e.g. with Tomcat 6.0) and run and debug your project.\r\n","tagline":"Erlang WAR packager: packages Erlang applications into Java WAR files using Erjang","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}